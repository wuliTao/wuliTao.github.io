<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-25T07:58:52.494Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wuliTao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shiro</title>
    <link href="http://yoursite.com/2017/11/25/shiro/"/>
    <id>http://yoursite.com/2017/11/25/shiro/</id>
    <published>2017-11-25T07:56:39.160Z</published>
    <updated>2017-11-25T07:58:52.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shiro快速入门"><a href="#shiro快速入门" class="headerlink" title="shiro快速入门"></a>shiro快速入门</h2><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="登录顺序"><a href="#登录顺序" class="headerlink" title="登录顺序"></a>登录顺序</h3><p>1、获取登录凭证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UsernamePasswordToken token=<span class="keyword">new</span> UsernamePasswordToken(<span class="string">"用户名"</span>,<span class="string">"密码"</span>);</span><br></pre></td></tr></table></figure><p>2、提交凭证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure><p>3、处理登录结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    subject.login(token);</span><br><span class="line">&#125; <span class="keyword">catch</span> ( UnknownAccountException uae ) &#123; </span><br><span class="line">&#125; <span class="keyword">catch</span> ( IncorrectCredentialsException ice ) &#123; </span><br><span class="line">&#125; <span class="keyword">catch</span> ( LockedAccountException lae ) &#123; </span><br><span class="line">&#125; <span class="keyword">catch</span> ( ExcessiveAttemptsException eae ) &#123; </span><br><span class="line">&#125; </span><br><span class="line">&#125; <span class="keyword">catch</span> ( AuthenticationException ae ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Authentication认证"><a href="#Authentication认证" class="headerlink" title="Authentication认证"></a>Authentication认证</h2><h3 id="认证顺序"><a href="#认证顺序" class="headerlink" title="认证顺序"></a>认证顺序</h3><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-13/6541012.jpg" alt=""></p><p>1、登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SecurityManager manager = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>).getInstance();</span><br><span class="line">SecurityUtils.setSecurityManager(manager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">UsernamePasswordToken token=<span class="keyword">new</span> UsernamePasswordToken(<span class="string">"用户名"</span>,<span class="string">"密码"</span>);</span><br><span class="line">subject.login(token);</span><br></pre></td></tr></table></figure><p>2、实际身份认证</p><p>subject委托给securityManager，调用securityManager.login(token)</p><p>3、认证</p><p>SecurityManager接收令牌并简单地委托给realm</p><p>4、认证策略</p><p>如果有多个Realm身份认证，通过认证策略来决定如何认证</p><p>5、Realm认证</p><p>realm中有两个方法，这里是最终提供认证与授权的逻辑的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span><span class="comment">//认证</span></span></span><br><span class="line"><span class="function">AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span><span class="comment">//授权</span></span></span><br></pre></td></tr></table></figure><h3 id="realm认证"><a href="#realm认证" class="headerlink" title="realm认证"></a>realm认证</h3><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">       <span class="comment">//你的判断逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username,password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多realm认证"><a href="#多realm认证" class="headerlink" title="多realm认证"></a>多realm认证</h3><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-13/91753810.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">#多域认证</span><br><span class="line">userRealm=com.study.shiro.UserRealm1</span><br><span class="line">emailRealm=com.study.shiro.EmailRealm</span><br><span class="line">securityManager.realms=$userRealm,$emailRealm,$iniRealm</span><br><span class="line"></span><br><span class="line">#认证策略</span><br><span class="line">authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy</span><br><span class="line">securityManager.authenticator.authenticationStrategy = $authcStrategy</span><br><span class="line"></span><br><span class="line">[users]</span><br><span class="line">lisi=123</span><br></pre></td></tr></table></figure><h2 id="角色与授权"><a href="#角色与授权" class="headerlink" title="角色与授权"></a>角色与授权</h2><h3 id="授权顺序"><a href="#授权顺序" class="headerlink" title="授权顺序"></a>授权顺序</h3><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-13/32866646.jpg" alt=""></p><h3 id="ini配置"><a href="#ini配置" class="headerlink" title="ini配置"></a>ini配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[users]</span><br><span class="line">admin=123,r1,r2 #admin拥有r1,r2角色</span><br><span class="line">lisi=123,r3 #lisi拥有r3角色</span><br><span class="line"></span><br><span class="line">[roles]</span><br><span class="line">r1=user:*  #r1角色拥有user的增删改查权限</span><br><span class="line">r2=admin:user:add #r2角色拥有admin下面user的增加权限</span><br><span class="line">r3=vip:view #r3角色拥有vip的查询权限</span><br></pre></td></tr></table></figure><p>注意：只需要配置就要可以完成授权，具体实现是PermissionResolver完成的</p><h3 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="comment">//判断是否拥有某个角色，返回真假</span></span><br><span class="line">System.out.println(subject.hasRole(<span class="string">"r1"</span>));</span><br><span class="line"><span class="comment">//断言是某个角色，如果不是则抛出异常</span></span><br><span class="line">subject.checkRole(<span class="string">"r1"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="comment">//判读是否拥有某个权限</span></span><br><span class="line">System.out.println(subject.isPermitted(<span class="string">"admin:user:add"</span>));</span><br><span class="line"><span class="comment">//断言拥有某个权限，如果没有则抛出异常</span></span><br><span class="line">subject.checkPermission(<span class="string">"user:*"</span>);</span><br></pre></td></tr></table></figure><h3 id="realm授权"><a href="#realm授权" class="headerlink" title="realm授权"></a>realm授权</h3><p>假设zhao在ini中只配置了user，没有配置role，可以在Realm中添加角色和权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        SimpleAuthorizationInfo info=<span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//TODO 后期角色和权限可以从数据库中获取</span></span><br><span class="line">        info.addRole(<span class="string">"r1"</span>);<span class="comment">//添加角色1</span></span><br><span class="line">        info.addRole(<span class="string">"r2"</span>);<span class="comment">//添加角色2</span></span><br><span class="line">        info.addStringPermission(<span class="string">"classroom:*"</span>);<span class="comment">//添加额外的权限</span></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h2><p>加解密会常常用到一个类HashedCredentialsMatcher，我们需要在ini中配置，realm中一个属性是credentialsMatcher，可以用来注入凭证匹配器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><br><span class="line">passwordRealm.credentialsMatcher=$matcher</span><br><span class="line">matcher.hashAlgorithmName=md5 #指定使用md5加解密</span><br></pre></td></tr></table></figure><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String salt=<span class="string">"shiro"</span>;<span class="comment">//颜值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> hashIterations=<span class="number">1</span>;<span class="comment">//迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Md5Hash(password,salt,hashIterations).toHex();</span><br><span class="line">    <span class="comment">//SimpleHash hash = new SimpleHash("md5", str, salt, 1);</span></span><br><span class="line">    <span class="comment">//return hash.toHex();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="realm中密码解密"><a href="#realm中密码解密" class="headerlink" title="realm中密码解密"></a>realm中密码解密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleAuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(username, password, getName());</span><br><span class="line">info.setCredentialsSalt(ByteSource.Util.bytes(<span class="string">"shiro"</span>));<span class="comment">//通过salt解密</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;shiro快速入门&quot;&gt;&lt;a href=&quot;#shiro快速入门&quot; class=&quot;headerlink&quot; title=&quot;shiro快速入门&quot;&gt;&lt;/a&gt;shiro快速入门&lt;/h2&gt;&lt;h2 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="基础设施" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://yoursite.com/2017/11/25/redis/"/>
    <id>http://yoursite.com/2017/11/25/redis/</id>
    <published>2017-11-25T07:53:58.949Z</published>
    <updated>2017-11-21T15:19:24.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ul><li>高性能</li><li>可扩展</li><li>内存存储</li><li>key/value数据存储方式</li></ul><h2 id="1-nosql概念"><a href="#1-nosql概念" class="headerlink" title="1 nosql概念"></a>1 nosql概念</h2><p>NoSQL（not only sql）泛指非关系型的数据库。</p><p>由于传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的网站，例如搜索引擎，微博，电商等等，暴露了很多难以克服的问题，例如，查询速度慢，扩展性差，不支持高并发等等。</p><p>NoSQL数据库是为了解决高并发、高可扩展、高可用、大数据存储问题而产生的解决方案。</p><h3 id="NoSQL特点"><a href="#NoSQL特点" class="headerlink" title="NoSQL特点"></a>NoSQL特点</h3><ul><li>数据保存在内存</li><li>弹性扩展</li><li>集群分片</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>数据模型比较简单</li><li>需要灵活性更强的IT系统</li><li>对数据库性能要求较高</li><li>不需要高度的数据一致性</li></ul><h2 id="2-redis简介"><a href="#2-redis简介" class="headerlink" title="2 redis简介"></a>2 redis简介</h2><ul><li>高性能</li><li>可扩展</li><li>内存存储</li><li>key/value数据存储方式</li></ul><h2 id="3-redis入门"><a href="#3-redis入门" class="headerlink" title="3 redis入门"></a>3 redis入门</h2><ul><li>string（字符串）</li></ul><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/17268187.jpg" alt=""></p><ul><li>hash（哈希）相对于HashMap</li></ul><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/30270828.jpg" alt=""></p><ul><li>list（列表）相当于LinkedList</li></ul><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/76282308.jpg" alt=""></p><ul><li>set（集合）相当于HashSet</li></ul><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/10334726.jpg" alt=""></p><ul><li>zset( 有序集合 ) 相当于TreeSet</li></ul><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/15006637.jpg" alt=""></p><ul><li>key操作</li></ul><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/77224687.jpg" alt=""></p><h2 id="4-持久化简介"><a href="#4-持久化简介" class="headerlink" title="4 持久化简介"></a>4 持久化简介</h2><p>为应对拉闸限电，系统当机等事故，redis使用持久化技术来避免灾难性后果。</p><p>redis有两种持久化方法：RDB、AOF</p><h3 id="rdb方式"><a href="#rdb方式" class="headerlink" title="rdb方式"></a>rdb方式</h3><p>rdb:在指定的时间间隔对数据进行快照存储</p><ul><li>数据保存在硬盘上的一个dump.rdb文件中，如果删除将失去备份</li><li>rdb方式的配置参数在redis.conf中，具体请查看官方文档</li></ul><p>优点：速度快，并且异步执行，不影响正常功能</p><p>缺点：间隔期间，若服务器异常，将有数据丢失</p><h3 id="aof方式"><a href="#aof方式" class="headerlink" title="aof方式"></a>aof方式</h3><p>aof:记录每次写操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据</p><p>优点：不会有数据丢失</p><p>缺点：若备份指令很多，恢复数据很慢</p><h2 id="5-事务"><a href="#5-事务" class="headerlink" title="5 事务"></a>5 事务</h2><h3 id="redis事务的3个指令"><a href="#redis事务的3个指令" class="headerlink" title="redis事务的3个指令"></a>redis事务的3个指令</h3><ul><li>multi开启事务</li><li>exec提交事务</li><li>watch监视某个键是否被修改，若在事务提交前有被其他客户端所改动，事务将失败</li></ul><h3 id="java操作redis事务"><a href="#java操作redis事务" class="headerlink" title="java操作redis事务"></a>java操作redis事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis=<span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction tx = jedis.multi();</span><br><span class="line"><span class="comment">//执行语句</span></span><br><span class="line">tx.set(<span class="string">"goodname"</span>, <span class="string">"裤子"</span>);</span><br><span class="line">tx.set(<span class="string">"goodprice"</span>, <span class="string">"100"</span>);</span><br><span class="line">tx.get(<span class="string">"goodname"</span>);</span><br><span class="line"><span class="comment">//提交事务，并且返回结果</span></span><br><span class="line">List&lt;Object&gt; exec = tx.exec();</span><br><span class="line">System.out.println(exec);</span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h2 id="6-订阅与发布"><a href="#6-订阅与发布" class="headerlink" title="6 订阅与发布"></a>6 订阅与发布</h2><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/51773017.jpg" alt=""></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>1、微博的关注与取消关注</p><p>2、向主服务器获取任务，然后执行任务</p><p>3、web聊天程序，例如webQQ</p><h2 id="7-redis主从"><a href="#7-redis主从" class="headerlink" title="7 redis主从"></a>7 redis主从</h2><p>一台主服务器，配置一台或者多台从服务器</p><p>作用：数据备份、故障转移、读写分离</p><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/64548490.jpg" alt=""></p><h2 id="8-redis集群"><a href="#8-redis集群" class="headerlink" title="8 redis集群"></a>8 redis集群</h2><p>集群：多台服务器一起工作</p><p>作用：提高存储容量，分布式计算，主从同步，故障转移</p><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-17/75516902.jpg" alt=""></p><h2 id="9-整合redis"><a href="#9-整合redis" class="headerlink" title="9 整合redis"></a>9 整合redis</h2><h3 id="整合的原则"><a href="#整合的原则" class="headerlink" title="整合的原则"></a>整合的原则</h3><ul><li>redis服务在整个架构中充当缓存</li><li>先从缓存获取数据，获取失败再从关系型数据库获取</li><li>更新关系型数据库时，缓存也要更新或者删除</li><li>redis不能影响正常的SSM工作</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1、编写redis接口</p><p>2、编写单机版RedisPool和集群版RedisCluster</p><p>具体请看RedisPool和RedisCluster工具类</p><p>3、在service层调用对应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;AppInfo&gt; <span class="title">selectAppInfoList</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先查询缓存</span></span><br><span class="line">String string = redisPool.hget(Const.APP_INFO_LIST, <span class="string">"appinfolist:"</span>+userId);</span><br><span class="line"><span class="keyword">if</span>(!StringUtils.isEmpty(string))&#123;</span><br><span class="line">System.out.println(<span class="string">"-----------redis 获取缓存数据----------"</span>);</span><br><span class="line"><span class="keyword">return</span> JsonUtils.readValue(string, <span class="keyword">new</span> TypeReference&lt;List&lt;AppInfo&gt;&gt;() &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询mysql数据库</span></span><br><span class="line">AppInfoExample example=<span class="keyword">new</span> AppInfoExample();</span><br><span class="line">example.createCriteria().andUserIdEqualTo(userId);</span><br><span class="line">List&lt;AppInfo&gt; list = appInfoMapper.selectByExample(example);</span><br><span class="line"><span class="comment">//将数据放入缓存</span></span><br><span class="line">redisPool.hset(Const.APP_INFO_LIST, <span class="string">"appinfolist:"</span>+userId,JsonUtils.toJSon(list));</span><br><span class="line">System.out.println(<span class="string">"-----------redis 存储缓存数据----------"</span>);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateAppInfo</span><span class="params">(AppInfo appInfo)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = appInfoMapper.updateByPrimaryKeySelective(appInfo);</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//删除缓存中对应的数据</span></span><br><span class="line">redisPool.hdel(Const.APP_INFO_LIST, <span class="string">"appinfolist:"</span>+appInfo.getUserId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在配置文件中，注入JedisPool或者JedisCluster</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单机版和集群版只能二选一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPool"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisCluster"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"nodes"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort.HostAndPort"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"172.16.32.49"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7001"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort.HostAndPort"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"172.16.32.49"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7002"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里配置6台服务器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、对象的存储，使用Jackson工具类将对象转成json，然后使用hash保存</p><p>2、使用Jackson工具类将json转成对象</p><p>3、具体使用情况请看JsonUtils工具类</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;redis&quot;&gt;&lt;a href=&quot;#redis&quot; class=&quot;headerlink&quot; title=&quot;redis&quot;&gt;&lt;/a&gt;redis&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;高性能&lt;/li&gt;
&lt;li&gt;可扩展&lt;/li&gt;
&lt;li&gt;内存存储&lt;/li&gt;
&lt;li&gt;key/value数据存
      
    
    </summary>
    
      <category term="java高级" scheme="http://yoursite.com/categories/java%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="nosql 缓存" scheme="http://yoursite.com/tags/nosql-%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/25/hello-world/"/>
    <id>http://yoursite.com/2017/11/25/hello-world/</id>
    <published>2017-11-25T06:41:05.663Z</published>
    <updated>2017-11-25T06:41:05.664Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="http://yoursite.com/2017/11/21/git/"/>
    <id>http://yoursite.com/2017/11/21/git/</id>
    <published>2017-11-21T15:19:24.668Z</published>
    <updated>2017-11-21T15:19:24.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git的起源"><a href="#git的起源" class="headerlink" title="git的起源"></a>git的起源</h2><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h3 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h3><blockquote><p>一个仓库，多个员工</p></blockquote><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-3/45730320.jpg" alt=""></p><p>只需要配置好一台中心服务器，并给每个人推送数据的权限，就可以开展工作了。但如果提交代码时有冲突， Git 根本就不会让用户覆盖他人代码，它直接驳回第二个人的提交操作。这就等于告诉提交者，你所作的修订无法合并，你必须先拉取最新数据下来，手工解决冲突合并后，才能继续推送新的提交。 绝大多数人都熟悉和了解这种模式的工作方式，所以使用非常广泛也推荐使用。</p><h4 id="具体流程如下："><a href="#具体流程如下：" class="headerlink" title="具体流程如下："></a>具体流程如下：</h4><ol><li>A开发者创建远程仓库，并把初始化项目push(推送)上去</li><li>B开发者clone(克隆)远程仓库到本地</li><li>B开发者添加修改代码，并且commit(提交)本地仓库</li><li>B开发准备push代码到远程仓库，必须先pull(拉取)远程仓库代码进行合并(因为此时远程仓库的代码可能又被A开发者修改过了)，如果有代码冲突，则解决冲突，然后push成功。</li><li>此时远程仓库的代码是A、B两个人的代码合并后的版本，A开发者本地和远程仓库不一致，所以A若添加修改代码，就重复3和4步骤</li></ol><h3 id="集成管理员工作流"><a href="#集成管理员工作流" class="headerlink" title="集成管理员工作流"></a>集成管理员工作流</h3><blockquote><p>多个仓库，一个管理员，多个员工，多个贡献者</p></blockquote><p>管理员建立自己的公共仓库A，员工clone仓库，流程与上面的“集中式工作流”一致。</p><p>不是该项目的员工，但是你对该项目感兴趣，想贡献自己的一份力量的人，可以fork(克隆)公共仓库为自己的仓库B，自己向B仓库提交代码，不受管理员限制。</p><p>如果两个仓库希望合并，你可以向管理员请求拉取你的仓库的代码。管理员通过申请后，你就成为项目的贡献者之一了。</p><h4 id="具体流程如下：-1"><a href="#具体流程如下：-1" class="headerlink" title="具体流程如下："></a>具体流程如下：</h4><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-3/9359014.jpg" alt=""></p><ol><li>项目管理员推送数据到公共仓库 blessed repository。</li><li>贡献者克隆此仓库，修订或编写新代码。</li><li>贡献者推送数据到自己的公共仓库 developer public。</li><li>贡献者给维护者发送邮件，pull request(请求拉取)自己的最新修订。</li><li>管理员在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，merge(合并)更新并做测试。</li><li>管理员将合并后的更新推送到主仓库 blessed repository。</li></ol><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>在 GitHub 网站上使用得最多的就是这种工作流。人们可以复制（fork 亦即克隆）某个项目到自己的列表中，成为自己的公共仓库。随后将自己的更新提交到这个仓库，所有人都可以看到你的每次更新。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>这么做最主要的优点在于，你可以按照自己的节奏继续工作，而不必等待维护者处理你提交的更新；而维护者也可以按照自己的节奏，任何时候都可以过来处理接纳你的贡献。</p><h3 id="司令官与副官工作流"><a href="#司令官与副官工作流" class="headerlink" title="司令官与副官工作流"></a>司令官与副官工作流</h3><blockquote><p>一个总负责人，多个助理，多个员工</p></blockquote><p>这其实是上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的 Linux 内核项目就是如此。各个集成管理员分别负责集成项目中的特定部分，所以称为副官（lieutenant）。而所有这些集成管理员头上还有一位负责统筹的总集成管理员，称为司令官（dictator）。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码。</p><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-3/5994103.jpg" alt=""></p><h4 id="具体流程如下：-2"><a href="#具体流程如下：-2" class="headerlink" title="具体流程如下："></a>具体流程如下：</h4><ol><li>一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（dictator 上的 master）衍合。</li><li>副官（lieutenant）将普通开发者的特性分支合并到自己的 master 分支中。</li><li>司令官（dictator）将所有副官的 master 分支并入自己的 master 分支。</li><li>司令官（dictator）将集成后的 master 分支推送到共享仓库 blessed repository 中，以便所有其他开发者以此为基础进行衍合。</li></ol><h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><p>这种工作流程并不常用，只有当项目极为庞杂，或者需要多级别管理时，才会体现出优势。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>利用这种方式，项目总负责人（即司令官）可以把大量分散的集成工作委托给不同的小组负责人分别处理，最后再统筹起来，如此各人的职责清晰明确，也不易出错</p><h2 id="git开发建议"><a href="#git开发建议" class="headerlink" title="git开发建议"></a>git开发建议</h2><h3 id="主分支Master"><a href="#主分支Master" class="headerlink" title="主分支Master"></a>主分支Master</h3><p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发</p><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-3/47459987.jpg" alt=""></p><h3 id="开发分支Develop"><a href="#开发分支Develop" class="headerlink" title="开发分支Develop"></a>开发分支Develop</h3><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）</p><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-3/55916228.jpg" alt=""></p><h3 id="临时性分支"><a href="#临时性分支" class="headerlink" title="临时性分支"></a>临时性分支</h3><p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。<br>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：　　</p><ul><li>功能（feature）分支</li><li>预发布（release）分支</li><li>修补bug（fixbug）分支</li></ul><p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p><h4 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h4><p>接下来，一个个来看这三种”临时性分支”。第一种是功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。</p><p>功能分支的名字，可以采用feature-*的形式命名。</p><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-3/27719286.jpg" alt=""></p><h4 id="预发布分支"><a href="#预发布分支" class="headerlink" title="预发布分支"></a>预发布分支</h4><p>第二种是预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。</p><p>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p><h4 id="修补bug分支"><a href="#修补bug分支" class="headerlink" title="修补bug分支"></a>修补bug分支</h4><p>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p><p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p><p><img src="http://oyirtj6m7.bkt.clouddn.com/17-11-3/83848594.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git的起源&quot;&gt;&lt;a href=&quot;#git的起源&quot; class=&quot;headerlink&quot; title=&quot;git的起源&quot;&gt;&lt;/a&gt;git的起源&lt;/h2&gt;&lt;h2 id=&quot;工作流程&quot;&gt;&lt;a href=&quot;#工作流程&quot; class=&quot;headerlink&quot; title=&quot;工
      
    
    </summary>
    
      <category term="基础设施" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
